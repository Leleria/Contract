// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.2
// source: ServiceLoyalty.proto

package sl

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LoyaltyServiceClient is the client API for LoyaltyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LoyaltyServiceClient interface {
	CalculatePriceWithPromoCode(ctx context.Context, in *CalculatePriceWithPromoCodeRequest, opts ...grpc.CallOption) (*CalculatePriceWithPromoCodeResponse, error)
	CalculatePriceWithBonuses(ctx context.Context, in *CalculatePriceWithBonusesRequest, opts ...grpc.CallOption) (*CalculatePriceWithBonusesResponse, error)
	DebitingPromoBonuses(ctx context.Context, in *DebitingPromoBonusesRequest, opts ...grpc.CallOption) (*DebitingPromoBonusesResponse, error)
	// promo code
	AddNewPromoCode(ctx context.Context, in *AddNewPromoCodeRequest, opts ...grpc.CallOption) (*AddNewPromoCodeResponse, error)
	DeletePromoCode(ctx context.Context, in *DeletePromoCodeRequest, opts ...grpc.CallOption) (*DeletePromoCodeResponse, error)
	ChangeNamePromoCode(ctx context.Context, in *ChangeNamePromoCodeRequest, opts ...grpc.CallOption) (*ChangeNamePromoCodeResponse, error)
	ChangeTypeDiscountPromoCode(ctx context.Context, in *ChangeTypeDiscountPromoCodeRequest, opts ...grpc.CallOption) (*ChangeTypeDiscountPromoCodeResponse, error)
	ChangeValueDiscountPromoCode(ctx context.Context, in *ChangeValueDiscountPromoCodeRequest, opts ...grpc.CallOption) (*ChangeValueDiscountPromoCodeResponse, error)
	ChangeDateStartActivePromoCode(ctx context.Context, in *ChangeDateStartActivePromoCodeRequest, opts ...grpc.CallOption) (*ChangeDateStartActivePromoCodeResponse, error)
	ChangeDateFinishActivePromoCode(ctx context.Context, in *ChangeDateFinishActivePromoCodeRequest, opts ...grpc.CallOption) (*ChangeDateFinishActivePromoCodeResponse, error)
	ChangeMaxCountUsesPromoCode(ctx context.Context, in *ChangeMaxCountUsesPromoCodeRequest, opts ...grpc.CallOption) (*ChangeMaxCountUsesPromoCodeResponse, error)
	GetPromoCode(ctx context.Context, in *GetPromoCodeRequest, opts ...grpc.CallOption) (*GetPromoCodeResponse, error)
	GetAllPromoCodes(ctx context.Context, in *GetAllPromoCodesRequest, opts ...grpc.CallOption) (*GetAllPromoCodesResponse, error)
	AddPersonalPromoCode(ctx context.Context, in *AddPersonalPromoCodeRequest, opts ...grpc.CallOption) (*AddPersonalPromoCodeResponse, error)
	// cashback
	SettingUpBudget(ctx context.Context, in *SettingUpBudgetRequest, opts ...grpc.CallOption) (*SettingUpBudgetResponse, error)
	ChangeBudgetCashBack(ctx context.Context, in *ChangeBudgetCashBackRequest, opts ...grpc.CallOption) (*ChangeBudgetCashBackResponse, error)
	ChangeTypeCashBack(ctx context.Context, in *ChangeTypeCashBackRequest, opts ...grpc.CallOption) (*ChangeTypeCashBackResponse, error)
	ChangeConditionCashBack(ctx context.Context, in *ChangeConditionCashBackRequest, opts ...grpc.CallOption) (*ChangeConditionCashBackResponse, error)
	GetCashBack(ctx context.Context, in *GetCashBackRequest, opts ...grpc.CallOption) (*GetCashBackResponse, error)
	GetAllCashBack(ctx context.Context, in *GetAllCashBackRequest, opts ...grpc.CallOption) (*GetAllCashBackResponse, error)
	DeleteCashBack(ctx context.Context, in *DeleteCashBackRequest, opts ...grpc.CallOption) (*DeleteCashBackResponse, error)
}

type loyaltyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLoyaltyServiceClient(cc grpc.ClientConnInterface) LoyaltyServiceClient {
	return &loyaltyServiceClient{cc}
}

func (c *loyaltyServiceClient) CalculatePriceWithPromoCode(ctx context.Context, in *CalculatePriceWithPromoCodeRequest, opts ...grpc.CallOption) (*CalculatePriceWithPromoCodeResponse, error) {
	out := new(CalculatePriceWithPromoCodeResponse)
	err := c.cc.Invoke(ctx, "/service.LoyaltyService/CalculatePriceWithPromoCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loyaltyServiceClient) CalculatePriceWithBonuses(ctx context.Context, in *CalculatePriceWithBonusesRequest, opts ...grpc.CallOption) (*CalculatePriceWithBonusesResponse, error) {
	out := new(CalculatePriceWithBonusesResponse)
	err := c.cc.Invoke(ctx, "/service.LoyaltyService/CalculatePriceWithBonuses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loyaltyServiceClient) DebitingPromoBonuses(ctx context.Context, in *DebitingPromoBonusesRequest, opts ...grpc.CallOption) (*DebitingPromoBonusesResponse, error) {
	out := new(DebitingPromoBonusesResponse)
	err := c.cc.Invoke(ctx, "/service.LoyaltyService/DebitingPromoBonuses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loyaltyServiceClient) AddNewPromoCode(ctx context.Context, in *AddNewPromoCodeRequest, opts ...grpc.CallOption) (*AddNewPromoCodeResponse, error) {
	out := new(AddNewPromoCodeResponse)
	err := c.cc.Invoke(ctx, "/service.LoyaltyService/AddNewPromoCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loyaltyServiceClient) DeletePromoCode(ctx context.Context, in *DeletePromoCodeRequest, opts ...grpc.CallOption) (*DeletePromoCodeResponse, error) {
	out := new(DeletePromoCodeResponse)
	err := c.cc.Invoke(ctx, "/service.LoyaltyService/DeletePromoCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loyaltyServiceClient) ChangeNamePromoCode(ctx context.Context, in *ChangeNamePromoCodeRequest, opts ...grpc.CallOption) (*ChangeNamePromoCodeResponse, error) {
	out := new(ChangeNamePromoCodeResponse)
	err := c.cc.Invoke(ctx, "/service.LoyaltyService/ChangeNamePromoCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loyaltyServiceClient) ChangeTypeDiscountPromoCode(ctx context.Context, in *ChangeTypeDiscountPromoCodeRequest, opts ...grpc.CallOption) (*ChangeTypeDiscountPromoCodeResponse, error) {
	out := new(ChangeTypeDiscountPromoCodeResponse)
	err := c.cc.Invoke(ctx, "/service.LoyaltyService/ChangeTypeDiscountPromoCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loyaltyServiceClient) ChangeValueDiscountPromoCode(ctx context.Context, in *ChangeValueDiscountPromoCodeRequest, opts ...grpc.CallOption) (*ChangeValueDiscountPromoCodeResponse, error) {
	out := new(ChangeValueDiscountPromoCodeResponse)
	err := c.cc.Invoke(ctx, "/service.LoyaltyService/ChangeValueDiscountPromoCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loyaltyServiceClient) ChangeDateStartActivePromoCode(ctx context.Context, in *ChangeDateStartActivePromoCodeRequest, opts ...grpc.CallOption) (*ChangeDateStartActivePromoCodeResponse, error) {
	out := new(ChangeDateStartActivePromoCodeResponse)
	err := c.cc.Invoke(ctx, "/service.LoyaltyService/ChangeDateStartActivePromoCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loyaltyServiceClient) ChangeDateFinishActivePromoCode(ctx context.Context, in *ChangeDateFinishActivePromoCodeRequest, opts ...grpc.CallOption) (*ChangeDateFinishActivePromoCodeResponse, error) {
	out := new(ChangeDateFinishActivePromoCodeResponse)
	err := c.cc.Invoke(ctx, "/service.LoyaltyService/ChangeDateFinishActivePromoCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loyaltyServiceClient) ChangeMaxCountUsesPromoCode(ctx context.Context, in *ChangeMaxCountUsesPromoCodeRequest, opts ...grpc.CallOption) (*ChangeMaxCountUsesPromoCodeResponse, error) {
	out := new(ChangeMaxCountUsesPromoCodeResponse)
	err := c.cc.Invoke(ctx, "/service.LoyaltyService/ChangeMaxCountUsesPromoCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loyaltyServiceClient) GetPromoCode(ctx context.Context, in *GetPromoCodeRequest, opts ...grpc.CallOption) (*GetPromoCodeResponse, error) {
	out := new(GetPromoCodeResponse)
	err := c.cc.Invoke(ctx, "/service.LoyaltyService/GetPromoCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loyaltyServiceClient) GetAllPromoCodes(ctx context.Context, in *GetAllPromoCodesRequest, opts ...grpc.CallOption) (*GetAllPromoCodesResponse, error) {
	out := new(GetAllPromoCodesResponse)
	err := c.cc.Invoke(ctx, "/service.LoyaltyService/GetAllPromoCodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loyaltyServiceClient) AddPersonalPromoCode(ctx context.Context, in *AddPersonalPromoCodeRequest, opts ...grpc.CallOption) (*AddPersonalPromoCodeResponse, error) {
	out := new(AddPersonalPromoCodeResponse)
	err := c.cc.Invoke(ctx, "/service.LoyaltyService/AddPersonalPromoCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loyaltyServiceClient) SettingUpBudget(ctx context.Context, in *SettingUpBudgetRequest, opts ...grpc.CallOption) (*SettingUpBudgetResponse, error) {
	out := new(SettingUpBudgetResponse)
	err := c.cc.Invoke(ctx, "/service.LoyaltyService/SettingUpBudget", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loyaltyServiceClient) ChangeBudgetCashBack(ctx context.Context, in *ChangeBudgetCashBackRequest, opts ...grpc.CallOption) (*ChangeBudgetCashBackResponse, error) {
	out := new(ChangeBudgetCashBackResponse)
	err := c.cc.Invoke(ctx, "/service.LoyaltyService/ChangeBudgetCashBack", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loyaltyServiceClient) ChangeTypeCashBack(ctx context.Context, in *ChangeTypeCashBackRequest, opts ...grpc.CallOption) (*ChangeTypeCashBackResponse, error) {
	out := new(ChangeTypeCashBackResponse)
	err := c.cc.Invoke(ctx, "/service.LoyaltyService/ChangeTypeCashBack", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loyaltyServiceClient) ChangeConditionCashBack(ctx context.Context, in *ChangeConditionCashBackRequest, opts ...grpc.CallOption) (*ChangeConditionCashBackResponse, error) {
	out := new(ChangeConditionCashBackResponse)
	err := c.cc.Invoke(ctx, "/service.LoyaltyService/ChangeConditionCashBack", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loyaltyServiceClient) GetCashBack(ctx context.Context, in *GetCashBackRequest, opts ...grpc.CallOption) (*GetCashBackResponse, error) {
	out := new(GetCashBackResponse)
	err := c.cc.Invoke(ctx, "/service.LoyaltyService/GetCashBack", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loyaltyServiceClient) GetAllCashBack(ctx context.Context, in *GetAllCashBackRequest, opts ...grpc.CallOption) (*GetAllCashBackResponse, error) {
	out := new(GetAllCashBackResponse)
	err := c.cc.Invoke(ctx, "/service.LoyaltyService/GetAllCashBack", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loyaltyServiceClient) DeleteCashBack(ctx context.Context, in *DeleteCashBackRequest, opts ...grpc.CallOption) (*DeleteCashBackResponse, error) {
	out := new(DeleteCashBackResponse)
	err := c.cc.Invoke(ctx, "/service.LoyaltyService/DeleteCashBack", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LoyaltyServiceServer is the server API for LoyaltyService service.
// All implementations must embed UnimplementedLoyaltyServiceServer
// for forward compatibility
type LoyaltyServiceServer interface {
	CalculatePriceWithPromoCode(context.Context, *CalculatePriceWithPromoCodeRequest) (*CalculatePriceWithPromoCodeResponse, error)
	CalculatePriceWithBonuses(context.Context, *CalculatePriceWithBonusesRequest) (*CalculatePriceWithBonusesResponse, error)
	DebitingPromoBonuses(context.Context, *DebitingPromoBonusesRequest) (*DebitingPromoBonusesResponse, error)
	// promo code
	AddNewPromoCode(context.Context, *AddNewPromoCodeRequest) (*AddNewPromoCodeResponse, error)
	DeletePromoCode(context.Context, *DeletePromoCodeRequest) (*DeletePromoCodeResponse, error)
	ChangeNamePromoCode(context.Context, *ChangeNamePromoCodeRequest) (*ChangeNamePromoCodeResponse, error)
	ChangeTypeDiscountPromoCode(context.Context, *ChangeTypeDiscountPromoCodeRequest) (*ChangeTypeDiscountPromoCodeResponse, error)
	ChangeValueDiscountPromoCode(context.Context, *ChangeValueDiscountPromoCodeRequest) (*ChangeValueDiscountPromoCodeResponse, error)
	ChangeDateStartActivePromoCode(context.Context, *ChangeDateStartActivePromoCodeRequest) (*ChangeDateStartActivePromoCodeResponse, error)
	ChangeDateFinishActivePromoCode(context.Context, *ChangeDateFinishActivePromoCodeRequest) (*ChangeDateFinishActivePromoCodeResponse, error)
	ChangeMaxCountUsesPromoCode(context.Context, *ChangeMaxCountUsesPromoCodeRequest) (*ChangeMaxCountUsesPromoCodeResponse, error)
	GetPromoCode(context.Context, *GetPromoCodeRequest) (*GetPromoCodeResponse, error)
	GetAllPromoCodes(context.Context, *GetAllPromoCodesRequest) (*GetAllPromoCodesResponse, error)
	AddPersonalPromoCode(context.Context, *AddPersonalPromoCodeRequest) (*AddPersonalPromoCodeResponse, error)
	// cashback
	SettingUpBudget(context.Context, *SettingUpBudgetRequest) (*SettingUpBudgetResponse, error)
	ChangeBudgetCashBack(context.Context, *ChangeBudgetCashBackRequest) (*ChangeBudgetCashBackResponse, error)
	ChangeTypeCashBack(context.Context, *ChangeTypeCashBackRequest) (*ChangeTypeCashBackResponse, error)
	ChangeConditionCashBack(context.Context, *ChangeConditionCashBackRequest) (*ChangeConditionCashBackResponse, error)
	GetCashBack(context.Context, *GetCashBackRequest) (*GetCashBackResponse, error)
	GetAllCashBack(context.Context, *GetAllCashBackRequest) (*GetAllCashBackResponse, error)
	DeleteCashBack(context.Context, *DeleteCashBackRequest) (*DeleteCashBackResponse, error)
	mustEmbedUnimplementedLoyaltyServiceServer()
}

// UnimplementedLoyaltyServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLoyaltyServiceServer struct {
}

func (UnimplementedLoyaltyServiceServer) CalculatePriceWithPromoCode(context.Context, *CalculatePriceWithPromoCodeRequest) (*CalculatePriceWithPromoCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CalculatePriceWithPromoCode not implemented")
}
func (UnimplementedLoyaltyServiceServer) CalculatePriceWithBonuses(context.Context, *CalculatePriceWithBonusesRequest) (*CalculatePriceWithBonusesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CalculatePriceWithBonuses not implemented")
}
func (UnimplementedLoyaltyServiceServer) DebitingPromoBonuses(context.Context, *DebitingPromoBonusesRequest) (*DebitingPromoBonusesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DebitingPromoBonuses not implemented")
}
func (UnimplementedLoyaltyServiceServer) AddNewPromoCode(context.Context, *AddNewPromoCodeRequest) (*AddNewPromoCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddNewPromoCode not implemented")
}
func (UnimplementedLoyaltyServiceServer) DeletePromoCode(context.Context, *DeletePromoCodeRequest) (*DeletePromoCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePromoCode not implemented")
}
func (UnimplementedLoyaltyServiceServer) ChangeNamePromoCode(context.Context, *ChangeNamePromoCodeRequest) (*ChangeNamePromoCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeNamePromoCode not implemented")
}
func (UnimplementedLoyaltyServiceServer) ChangeTypeDiscountPromoCode(context.Context, *ChangeTypeDiscountPromoCodeRequest) (*ChangeTypeDiscountPromoCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeTypeDiscountPromoCode not implemented")
}
func (UnimplementedLoyaltyServiceServer) ChangeValueDiscountPromoCode(context.Context, *ChangeValueDiscountPromoCodeRequest) (*ChangeValueDiscountPromoCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeValueDiscountPromoCode not implemented")
}
func (UnimplementedLoyaltyServiceServer) ChangeDateStartActivePromoCode(context.Context, *ChangeDateStartActivePromoCodeRequest) (*ChangeDateStartActivePromoCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeDateStartActivePromoCode not implemented")
}
func (UnimplementedLoyaltyServiceServer) ChangeDateFinishActivePromoCode(context.Context, *ChangeDateFinishActivePromoCodeRequest) (*ChangeDateFinishActivePromoCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeDateFinishActivePromoCode not implemented")
}
func (UnimplementedLoyaltyServiceServer) ChangeMaxCountUsesPromoCode(context.Context, *ChangeMaxCountUsesPromoCodeRequest) (*ChangeMaxCountUsesPromoCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeMaxCountUsesPromoCode not implemented")
}
func (UnimplementedLoyaltyServiceServer) GetPromoCode(context.Context, *GetPromoCodeRequest) (*GetPromoCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPromoCode not implemented")
}
func (UnimplementedLoyaltyServiceServer) GetAllPromoCodes(context.Context, *GetAllPromoCodesRequest) (*GetAllPromoCodesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllPromoCodes not implemented")
}
func (UnimplementedLoyaltyServiceServer) AddPersonalPromoCode(context.Context, *AddPersonalPromoCodeRequest) (*AddPersonalPromoCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPersonalPromoCode not implemented")
}
func (UnimplementedLoyaltyServiceServer) SettingUpBudget(context.Context, *SettingUpBudgetRequest) (*SettingUpBudgetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SettingUpBudget not implemented")
}
func (UnimplementedLoyaltyServiceServer) ChangeBudgetCashBack(context.Context, *ChangeBudgetCashBackRequest) (*ChangeBudgetCashBackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeBudgetCashBack not implemented")
}
func (UnimplementedLoyaltyServiceServer) ChangeTypeCashBack(context.Context, *ChangeTypeCashBackRequest) (*ChangeTypeCashBackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeTypeCashBack not implemented")
}
func (UnimplementedLoyaltyServiceServer) ChangeConditionCashBack(context.Context, *ChangeConditionCashBackRequest) (*ChangeConditionCashBackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeConditionCashBack not implemented")
}
func (UnimplementedLoyaltyServiceServer) GetCashBack(context.Context, *GetCashBackRequest) (*GetCashBackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCashBack not implemented")
}
func (UnimplementedLoyaltyServiceServer) GetAllCashBack(context.Context, *GetAllCashBackRequest) (*GetAllCashBackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllCashBack not implemented")
}
func (UnimplementedLoyaltyServiceServer) DeleteCashBack(context.Context, *DeleteCashBackRequest) (*DeleteCashBackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCashBack not implemented")
}
func (UnimplementedLoyaltyServiceServer) mustEmbedUnimplementedLoyaltyServiceServer() {}

// UnsafeLoyaltyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LoyaltyServiceServer will
// result in compilation errors.
type UnsafeLoyaltyServiceServer interface {
	mustEmbedUnimplementedLoyaltyServiceServer()
}

func RegisterLoyaltyServiceServer(s grpc.ServiceRegistrar, srv LoyaltyServiceServer) {
	s.RegisterService(&LoyaltyService_ServiceDesc, srv)
}

func _LoyaltyService_CalculatePriceWithPromoCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CalculatePriceWithPromoCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoyaltyServiceServer).CalculatePriceWithPromoCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.LoyaltyService/CalculatePriceWithPromoCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoyaltyServiceServer).CalculatePriceWithPromoCode(ctx, req.(*CalculatePriceWithPromoCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoyaltyService_CalculatePriceWithBonuses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CalculatePriceWithBonusesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoyaltyServiceServer).CalculatePriceWithBonuses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.LoyaltyService/CalculatePriceWithBonuses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoyaltyServiceServer).CalculatePriceWithBonuses(ctx, req.(*CalculatePriceWithBonusesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoyaltyService_DebitingPromoBonuses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DebitingPromoBonusesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoyaltyServiceServer).DebitingPromoBonuses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.LoyaltyService/DebitingPromoBonuses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoyaltyServiceServer).DebitingPromoBonuses(ctx, req.(*DebitingPromoBonusesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoyaltyService_AddNewPromoCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddNewPromoCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoyaltyServiceServer).AddNewPromoCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.LoyaltyService/AddNewPromoCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoyaltyServiceServer).AddNewPromoCode(ctx, req.(*AddNewPromoCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoyaltyService_DeletePromoCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePromoCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoyaltyServiceServer).DeletePromoCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.LoyaltyService/DeletePromoCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoyaltyServiceServer).DeletePromoCode(ctx, req.(*DeletePromoCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoyaltyService_ChangeNamePromoCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeNamePromoCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoyaltyServiceServer).ChangeNamePromoCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.LoyaltyService/ChangeNamePromoCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoyaltyServiceServer).ChangeNamePromoCode(ctx, req.(*ChangeNamePromoCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoyaltyService_ChangeTypeDiscountPromoCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeTypeDiscountPromoCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoyaltyServiceServer).ChangeTypeDiscountPromoCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.LoyaltyService/ChangeTypeDiscountPromoCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoyaltyServiceServer).ChangeTypeDiscountPromoCode(ctx, req.(*ChangeTypeDiscountPromoCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoyaltyService_ChangeValueDiscountPromoCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeValueDiscountPromoCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoyaltyServiceServer).ChangeValueDiscountPromoCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.LoyaltyService/ChangeValueDiscountPromoCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoyaltyServiceServer).ChangeValueDiscountPromoCode(ctx, req.(*ChangeValueDiscountPromoCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoyaltyService_ChangeDateStartActivePromoCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeDateStartActivePromoCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoyaltyServiceServer).ChangeDateStartActivePromoCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.LoyaltyService/ChangeDateStartActivePromoCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoyaltyServiceServer).ChangeDateStartActivePromoCode(ctx, req.(*ChangeDateStartActivePromoCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoyaltyService_ChangeDateFinishActivePromoCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeDateFinishActivePromoCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoyaltyServiceServer).ChangeDateFinishActivePromoCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.LoyaltyService/ChangeDateFinishActivePromoCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoyaltyServiceServer).ChangeDateFinishActivePromoCode(ctx, req.(*ChangeDateFinishActivePromoCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoyaltyService_ChangeMaxCountUsesPromoCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeMaxCountUsesPromoCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoyaltyServiceServer).ChangeMaxCountUsesPromoCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.LoyaltyService/ChangeMaxCountUsesPromoCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoyaltyServiceServer).ChangeMaxCountUsesPromoCode(ctx, req.(*ChangeMaxCountUsesPromoCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoyaltyService_GetPromoCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPromoCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoyaltyServiceServer).GetPromoCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.LoyaltyService/GetPromoCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoyaltyServiceServer).GetPromoCode(ctx, req.(*GetPromoCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoyaltyService_GetAllPromoCodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllPromoCodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoyaltyServiceServer).GetAllPromoCodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.LoyaltyService/GetAllPromoCodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoyaltyServiceServer).GetAllPromoCodes(ctx, req.(*GetAllPromoCodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoyaltyService_AddPersonalPromoCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPersonalPromoCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoyaltyServiceServer).AddPersonalPromoCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.LoyaltyService/AddPersonalPromoCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoyaltyServiceServer).AddPersonalPromoCode(ctx, req.(*AddPersonalPromoCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoyaltyService_SettingUpBudget_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SettingUpBudgetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoyaltyServiceServer).SettingUpBudget(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.LoyaltyService/SettingUpBudget",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoyaltyServiceServer).SettingUpBudget(ctx, req.(*SettingUpBudgetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoyaltyService_ChangeBudgetCashBack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeBudgetCashBackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoyaltyServiceServer).ChangeBudgetCashBack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.LoyaltyService/ChangeBudgetCashBack",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoyaltyServiceServer).ChangeBudgetCashBack(ctx, req.(*ChangeBudgetCashBackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoyaltyService_ChangeTypeCashBack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeTypeCashBackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoyaltyServiceServer).ChangeTypeCashBack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.LoyaltyService/ChangeTypeCashBack",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoyaltyServiceServer).ChangeTypeCashBack(ctx, req.(*ChangeTypeCashBackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoyaltyService_ChangeConditionCashBack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeConditionCashBackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoyaltyServiceServer).ChangeConditionCashBack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.LoyaltyService/ChangeConditionCashBack",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoyaltyServiceServer).ChangeConditionCashBack(ctx, req.(*ChangeConditionCashBackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoyaltyService_GetCashBack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCashBackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoyaltyServiceServer).GetCashBack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.LoyaltyService/GetCashBack",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoyaltyServiceServer).GetCashBack(ctx, req.(*GetCashBackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoyaltyService_GetAllCashBack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllCashBackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoyaltyServiceServer).GetAllCashBack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.LoyaltyService/GetAllCashBack",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoyaltyServiceServer).GetAllCashBack(ctx, req.(*GetAllCashBackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoyaltyService_DeleteCashBack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCashBackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoyaltyServiceServer).DeleteCashBack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.LoyaltyService/DeleteCashBack",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoyaltyServiceServer).DeleteCashBack(ctx, req.(*DeleteCashBackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LoyaltyService_ServiceDesc is the grpc.ServiceDesc for LoyaltyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LoyaltyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service.LoyaltyService",
	HandlerType: (*LoyaltyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CalculatePriceWithPromoCode",
			Handler:    _LoyaltyService_CalculatePriceWithPromoCode_Handler,
		},
		{
			MethodName: "CalculatePriceWithBonuses",
			Handler:    _LoyaltyService_CalculatePriceWithBonuses_Handler,
		},
		{
			MethodName: "DebitingPromoBonuses",
			Handler:    _LoyaltyService_DebitingPromoBonuses_Handler,
		},
		{
			MethodName: "AddNewPromoCode",
			Handler:    _LoyaltyService_AddNewPromoCode_Handler,
		},
		{
			MethodName: "DeletePromoCode",
			Handler:    _LoyaltyService_DeletePromoCode_Handler,
		},
		{
			MethodName: "ChangeNamePromoCode",
			Handler:    _LoyaltyService_ChangeNamePromoCode_Handler,
		},
		{
			MethodName: "ChangeTypeDiscountPromoCode",
			Handler:    _LoyaltyService_ChangeTypeDiscountPromoCode_Handler,
		},
		{
			MethodName: "ChangeValueDiscountPromoCode",
			Handler:    _LoyaltyService_ChangeValueDiscountPromoCode_Handler,
		},
		{
			MethodName: "ChangeDateStartActivePromoCode",
			Handler:    _LoyaltyService_ChangeDateStartActivePromoCode_Handler,
		},
		{
			MethodName: "ChangeDateFinishActivePromoCode",
			Handler:    _LoyaltyService_ChangeDateFinishActivePromoCode_Handler,
		},
		{
			MethodName: "ChangeMaxCountUsesPromoCode",
			Handler:    _LoyaltyService_ChangeMaxCountUsesPromoCode_Handler,
		},
		{
			MethodName: "GetPromoCode",
			Handler:    _LoyaltyService_GetPromoCode_Handler,
		},
		{
			MethodName: "GetAllPromoCodes",
			Handler:    _LoyaltyService_GetAllPromoCodes_Handler,
		},
		{
			MethodName: "AddPersonalPromoCode",
			Handler:    _LoyaltyService_AddPersonalPromoCode_Handler,
		},
		{
			MethodName: "SettingUpBudget",
			Handler:    _LoyaltyService_SettingUpBudget_Handler,
		},
		{
			MethodName: "ChangeBudgetCashBack",
			Handler:    _LoyaltyService_ChangeBudgetCashBack_Handler,
		},
		{
			MethodName: "ChangeTypeCashBack",
			Handler:    _LoyaltyService_ChangeTypeCashBack_Handler,
		},
		{
			MethodName: "ChangeConditionCashBack",
			Handler:    _LoyaltyService_ChangeConditionCashBack_Handler,
		},
		{
			MethodName: "GetCashBack",
			Handler:    _LoyaltyService_GetCashBack_Handler,
		},
		{
			MethodName: "GetAllCashBack",
			Handler:    _LoyaltyService_GetAllCashBack_Handler,
		},
		{
			MethodName: "DeleteCashBack",
			Handler:    _LoyaltyService_DeleteCashBack_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ServiceLoyalty.proto",
}
